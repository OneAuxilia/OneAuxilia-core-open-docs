{
    "swagger": "2.0",
    "info": {
        "description": "This is a documents for OneAuxilia API.",
        "title": "Documents OneAuxilia API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "127.0.0.1:5000",
    "basePath": "/api/v1/",
    "paths": {
        "/organizations/": {
            "get": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "This endpoint retrieves a list of all organizational instances. It requires `OneAuxiliaAuth` for authorization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Retrieve all organizational instances",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Returns users with the user ids specified. For each user id, the + and - can be prepended to the id,\nwhich denote whether the respective user id should be included or excluded from the result set.\nAccepts up to 100 user ids. Any user ids not found are ignored.\nexample: 234",
                        "name": "owner_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The page number to retrieve. Defaults to 1 if not specified.\nexample: 1",
                        "name": "page_num",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The number of items per page. Defaults to 10 if not specified.\nexample: 10",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns organizations with ID, name, or slug that match the given query. Uses exact match for organization ID and partial match for name and slug.\nexample: abc",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of all organizational instances",
                        "schema": {
                            "$ref": "#/definitions/utils.Paginator"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "This endpoint allows for the creation of a new organization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Create a new organization",
                "parameters": [
                    {
                        "description": "Organization creation details",
                        "name": "CreateOrg",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.OrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful organization creation response",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found, such as if the organization already exists",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/organizations/{org_id}/": {
            "get": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "This endpoint retrieves the details of a specific organization identified by the provided organization ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Get organization details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the organization to retrieve",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization details",
                        "schema": {
                            "$ref": "#/definitions/model.Tenant"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "This endpoint allows updating details of an organization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Update organization details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the organization to update",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Organization update details",
                        "name": "OrgUpdate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.OrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful organization update response",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found, such as if the organization does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "This endpoint deletes an organization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Delete an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the organization to delete",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful organization deletion response",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found, such as if the organization does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/sessions/{session_id}/revoke/": {
            "post": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "Revokes a user session by its session ID, effectively logging the user out.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Revoke a user session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the session to revoke",
                        "name": "session_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session revoked successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Session not found if the specified session ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/sessions/{session_id}/tokens/": {
            "post": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "This endpoint retrieves a session token for a user by providing their user ID, session ID, and a template slug.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Retrieve token with template",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Session ID associated with the token retrieval",
                        "name": "session_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User details for which to retrieve the token",
                        "name": "TemplateUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TemplateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful token retrieval response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found, such as if the user or session does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/sessions/{session_id}/verify/": {
            "post": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "Verifies the validity of a user session using its session ID. Requires `OneAuxiliaAuth` for authorization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Verify a user session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the session to verify",
                        "name": "session_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session verified successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Session not found if the specified session ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/sessions/{user_id}/": {
            "get": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "Retrieves the details of all sessions associated with a specified user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Get list of session details for a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the user whose sessions are to be retrieved",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found if the specified user ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/sign_in_tokens/": {
            "post": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "Authenticates superadmin users by validating their credentials and returns a sign-in token upon successful login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SignInTokens"
                ],
                "summary": "Create Sign-In Token",
                "parameters": [
                    {
                        "description": "Sign-in request body containing the necessary credentials",
                        "name": "SignInToken",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignInToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login response containing user information and an authentication token",
                        "schema": {
                            "$ref": "#/definitions/dto.UserInfoFoward"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or incorrect login credentials",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found if the provided credentials do not match any existing account",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error if something went wrong on the server side",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/sign_in_tokens/{sign_in_token_id}/": {
            "delete": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "Revokes a specific sign-in token, invalidating it and preventing any further use.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SignInTokens"
                ],
                "summary": "Revoke a sign-in token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the sign-in token to revoke",
                        "name": "sign_in_token_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response indicating the token was revoked",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or token ID",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Token not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/users/": {
            "get": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "This endpoint allows superadmin users to retrieve a list of all users in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The page number to retrieve. Defaults to 1 if not specified.\nexample: 1",
                        "name": "page_num",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The number of items per page. Defaults to 10 if not specified.\nexample: 10",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns users with the specified phone numbers. Accepts up to 100 phone numbers. Any phone numbers not found are ignored.\nexample: user_amkHacjkasdpoqe",
                        "name": "phone_number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns users matching the search term. This can be used for partial matches on user attributes.",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Returns users with the specified user IDs. The IDs can be either positive or negative, where a positive ID includes the user,\nand a negative ID excludes the user from the results. Accepts up to 100 user IDs. Any user IDs not found are ignored.\nexample: 2592000, -123456",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Returns users with the specified usernames. Accepts up to 100 usernames. Any usernames not found are ignored.\nexample: user_amkHacjkasdpoqe",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response containing a list of users",
                        "schema": {
                            "$ref": "#/definitions/utils.Paginator"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "No users found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/users/create/": {
            "post": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "This endpoint allows the creation of a new user account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user account",
                "parameters": [
                    {
                        "description": "User creation details",
                        "name": "CreateUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful account creation response",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found, such as if the user already exists or if the endpoint could not process the request",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/users/validate_backup_code/": {
            "post": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "Validates a recovery code provided by the user for authentication or account recovery purposes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Validate Recovery Code",
                "parameters": [
                    {
                        "description": "Request body containing the recovery code",
                        "name": "BackupCodeDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BackupCodeDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful validation of the recovery code",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or recovery code",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Recovery code or user not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/users/validate_totp/": {
            "post": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "Validates the provided two-factor authentication (2FA) credentials for an existing user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Validate Two-Factor Authentication Credentials",
                "parameters": [
                    {
                        "description": "Request body containing the 2FA credentials",
                        "name": "TotpAuthenticator",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TotpAuthenticator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response indicating the 2FA credentials are valid",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found if the user or 2FA setup is not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/users/{dynamic_field}/": {
            "get": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "Retrieves the profile information of a user based on a dynamic field, which can be either the username, phone, or email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user profile by dynamic field",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The username, phone, or email of the user to retrieve",
                        "name": "dynamic_field",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user profile information",
                        "schema": {
                            "$ref": "#/definitions/dto.UserInfo"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found if no user matches the provided dynamic field",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/users/{user_id}/": {
            "get": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "Retrieves the profile information of a specific user based on the provided user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Retrieve user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the user to retrieve",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user profile information",
                        "schema": {
                            "$ref": "#/definitions/dto.UserInfo"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found if the provided user ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "Allows users to update their profile information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the user to update",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User profile update details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful profile update response",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found if the specified ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "This endpoint allows for the deletion of a user account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the user to be deleted",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful account deletion response",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found, such as if the specified user does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/users/{user_id}/change_password/": {
            "put": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "This endpoint enables users to change their password. It requires Bearer authentication and `OneAuxiliaAuth` for authorization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the user whose password is to be changed",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Details of the new password for the user",
                        "name": "UpdatePassUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePassUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response indicating the password has been changed",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found if the specified ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/users/{user_id}/mfa/": {
            "delete": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "This endpoint allows superadmin users to disable MFA methods for a specific user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Disable Multi-Factor Authentication (MFA) for a User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the user whose MFA methods are to be disabled",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response indicating the user's MFA methods have been disabled",
                        "schema": {
                            "$ref": "#/definitions/dto.UserInfoFoward"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or incorrect credentials",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found if the provided user ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error if something went wrong on the server side",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/users/{user_id}/regen_backup_code/": {
            "post": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "Generates a new backup code for a user, which can be used for account recovery or authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Regenerate Backup Code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the user for whom to regenerate the backup code",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New backup code successfully generated",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request or error generating the new backup code",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found or account issue",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/users/{user_id}/reset_password/": {
            "put": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "This endpoint allows users to reset their password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the user whose password is to be reset",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Details of the new password for the user",
                        "name": "ResetPassUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ResetPassUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response indicating the password has been reset",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found if the specified ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/users/{user_id}/update_totp/": {
            "put": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "Updates the two-factor authentication (2FA) secret key for the user identified by the provided user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update Two-Factor Authentication Secret Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the user whose 2FA secret key is to be updated",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "TwoFASetting request body containing the new 2FA secret key and strategy",
                        "name": "TwoFASetting",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TwoFASetting"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response indicating the 2FA secret key was updated",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input, validation errors, or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found if the user ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error if something went wrong on the server side",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/users/{user_id}/verify_password/": {
            "post": {
                "security": [
                    {
                        "OneAuxiliaAuth": []
                    }
                ],
                "description": "Authenticates superadmin users by verifying their password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Verify Password for Sign-In",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the user whose password is being verified",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "VerifyPassword request body containing the necessary credentials",
                        "name": "VerifyPassword",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response containing user information and an authentication token",
                        "schema": {
                            "$ref": "#/definitions/dto.UserInfoFoward"
                        }
                    },
                    "400": {
                        "description": "Invalid request due to malformed input or incorrect login credentials",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found if the provided user ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error if something went wrong on the server side",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.BackupCodeDto": {
            "type": "object",
            "required": [
                "backup_code"
            ],
            "properties": {
                "backup_code": {
                    "description": "Code is the verification code provided by the user.\nrequired: true\nexample: \"123456\"",
                    "type": "string"
                }
            }
        },
        "dto.CreateUser": {
            "type": "object",
            "required": [
                "email",
                "password",
                "password_confirm"
            ],
            "properties": {
                "email": {
                    "description": "Email is the user's email address.\nrequired: true\nmaxLength: 255\nexample: \"user@example.com\"",
                    "type": "string",
                    "maxLength": 255
                },
                "first_name": {
                    "description": "FirstName is the user's first name.\nmaxLength: 255\nexample: \"John\"",
                    "type": "string",
                    "maxLength": 255
                },
                "last_name": {
                    "description": "LastName is the user's last name.\nmaxLength: 255\nexample: \"Doe\"",
                    "type": "string",
                    "maxLength": 255
                },
                "password": {
                    "description": "Password is the user's password.\nrequired: true\nminLength: 6\nmaxLength: 32\nexample: \"P@ssw0rd123\"",
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 6
                },
                "password_confirm": {
                    "description": "PasswordConfirm is the confirmation of the user's password.\nrequired: true\nmust match the Password field\nexample: \"P@ssw0rd123\"",
                    "type": "string"
                }
            }
        },
        "dto.GroupSchamas": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.OrganizationRequest": {
            "type": "object",
            "required": [
                "display_name",
                "name"
            ],
            "properties": {
                "avatar": {
                    "description": "Avatar is the URL of the organization's avatar image.\nrequired: false\nexample: \"https://example.com/avatar.png\"",
                    "type": "string"
                },
                "display_name": {
                    "description": "DisplayName is the display name of the organization.\nrequired: true\nmaxLength: 255\nexample: \"Organization Test\"",
                    "type": "string",
                    "maxLength": 255
                },
                "name": {
                    "description": "Name is the name of the organization.\nrequired: true\nmaxLength: 255\nexample: \"Organization Test\"",
                    "type": "string",
                    "maxLength": 255
                },
                "owner_id": {
                    "description": "OwnerID is the ID of the user who owns the organization.\nrequired: false\nexample: 123",
                    "type": "integer"
                }
            }
        },
        "dto.ResetPassUser": {
            "type": "object",
            "required": [
                "new_password"
            ],
            "properties": {
                "new_password": {
                    "description": "NewPassword is the new password that the user wants to set.\nrequired: true\nminLength: 6\nmaxLength: 128\nexample: \"NewPassword123!\"",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 6
                },
                "new_password_confirm": {
                    "description": "NewPasswordConfirm is the confirmation of the new password.\nrequired: true\nmust be equal to NewPassword\nexample: \"NewPassword123!\"",
                    "type": "string"
                }
            }
        },
        "dto.SignInToken": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "expires_in_seconds": {
                    "description": "Default: 2592000\nOptional parameter to specify the life duration of the sign in token in seconds. By default, the duration is 30 days.\nexample: 2592000",
                    "type": "integer"
                },
                "user_id": {
                    "description": "The ID of the user that can use the newly created sign in token\nrequired: true\nexample: user_amkHacjkasdpoqe",
                    "type": "integer"
                }
            }
        },
        "dto.TemplateUser": {
            "type": "object",
            "required": [
                "templateSlug",
                "userId"
            ],
            "properties": {
                "templateSlug": {
                    "description": "The slug of the template that can use the newly token\nrequired: true\nexample: \"abc-custom\"",
                    "type": "string"
                },
                "userId": {
                    "description": "The ID of the user that can use the newly created sign in token\nrequired: true\nexample: user_amkHacjkasdpoqe",
                    "type": "integer"
                }
            }
        },
        "dto.TokenInfomation": {
            "type": "object",
            "properties": {
                "expired_at": {
                    "type": "integer"
                },
                "session_id": {
                    "type": "string"
                },
                "session_name": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.TotpAuthenticator": {
            "type": "object",
            "required": [
                "code",
                "strategy"
            ],
            "properties": {
                "code": {
                    "description": "Code is the 2FA code provided by the user.\nrequired: true\nexample: \"123456\"",
                    "type": "string"
                },
                "strategy": {
                    "description": "AuthType indicates the type of authentication (e.g., 'email', 'sms', 'auth_code').\nrequired: true\nexample: \"auth_code\"",
                    "type": "string"
                }
            }
        },
        "dto.TwoFASetting": {
            "type": "object",
            "required": [
                "strategy"
            ],
            "properties": {
                "strategy": {
                    "description": "AuthType indicates the type of authentication (e.g., email, SMS).\nrequired: true\nexample: 1.\"email\" 2.\"sms\" 3.\"auth_code\"",
                    "type": "string"
                }
            }
        },
        "dto.UpdatePassUser": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "description": "NewPassword is the new password that the user wants to set.\nrequired: true\nminLength: 6\nmaxLength: 128\nexample: \"NewPassword123!\"",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 6
                },
                "new_password_confirm": {
                    "description": "NewPasswordConfirm is the confirmation of the new password.\nrequired: true\nmust be equal to NewPassword\nexample: \"NewPassword123!\"",
                    "type": "string"
                },
                "old_password": {
                    "description": "OldPassword is the current password of the user.\nrequired: true\nminLength: 6\nmaxLength: 128\nexample: \"OldPassword123!\"",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 6
                }
            }
        },
        "dto.UpdateUser": {
            "type": "object",
            "properties": {
                "additional_information": {
                    "description": "AdditionalInformation contains extra user details in a flexible format\nexample: {\"address1\": \"123 Main St\", \"city\": \"New York\"}",
                    "type": "object",
                    "additionalProperties": true
                },
                "first_name": {
                    "description": "FirstName is the user's first name\nexample: \"John\"",
                    "type": "string"
                },
                "last_name": {
                    "description": "LastName is the user's last name\nexample: \"Doe\"",
                    "type": "string"
                },
                "username": {
                    "description": "username is the user's username\nexample: \"johndymamic\"",
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 6
                }
            }
        },
        "dto.UserInfo": {
            "type": "object",
            "properties": {
                "additional_information": {
                    "type": "object",
                    "additionalProperties": true
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_factor_verification": {
                    "type": "object",
                    "additionalProperties": true
                },
                "first_name": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.GroupSchamas"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "last_ip_sign_in": {
                    "type": "string"
                },
                "last_login": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "number_of_logins": {
                    "type": "integer"
                },
                "phone_number": {
                    "type": "string"
                },
                "second_factor_type": {
                    "type": "string"
                },
                "second_factor_verification": {
                    "type": "object",
                    "additionalProperties": true
                },
                "status": {
                    "type": "string"
                },
                "supported_first_factors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "supported_second_factors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.UserInfoFoward": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "Authentication token information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TokenInfomation"
                        }
                    ]
                },
                "user": {
                    "description": "User information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UserInfo"
                        }
                    ]
                }
            }
        },
        "dto.VerifyPassword": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "description": "The user password to verify.\nexample: \"abc@123X\"",
                    "type": "string"
                }
            }
        },
        "model.Member": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "phone_number": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.MemberGroup": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "member_groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Member"
                    }
                },
                "name": {
                    "type": "string"
                },
                "tenant": {
                    "$ref": "#/definitions/model.Tenant"
                },
                "tenant_id": {
                    "type": "integer"
                }
            }
        },
        "model.Tenant": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "member_groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MemberGroup"
                    }
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Member"
                    }
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/model.Member"
                },
                "owner_id": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "utils.BasicResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code.",
                    "type": "integer",
                    "example": 500
                },
                "data": {},
                "error": {
                    "description": "Error message.",
                    "type": "string",
                    "example": "{$err}"
                },
                "message": {
                    "description": "Message corresponding to the status code.",
                    "type": "string",
                    "example": "internal_server_error"
                }
            }
        },
        "utils.FailedResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code.",
                    "type": "integer",
                    "example": 400
                },
                "error": {
                    "description": "Error message.",
                    "type": "string",
                    "example": "{$err}"
                },
                "message": {
                    "description": "Message corresponding to the status code.",
                    "type": "string",
                    "example": "bad_request"
                }
            }
        },
        "utils.Paginator": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 100
                },
                "data": {},
                "has_next": {
                    "type": "boolean",
                    "example": true
                },
                "has_previous": {
                    "type": "boolean",
                    "example": false
                },
                "page_num": {
                    "type": "integer",
                    "example": 1
                },
                "page_size": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "utils.SuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code.",
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "description": "data payload."
                },
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        }
    },
    "securityDefinitions": {
        "OneAuxiliaAuth": {
            "description": "OneAuxiliaAuth Key Format: sk_$environment_$secret value",
            "type": "apiKey",
            "name": "OneAuxiliaAuth",
            "in": "header"
        }
    }
}