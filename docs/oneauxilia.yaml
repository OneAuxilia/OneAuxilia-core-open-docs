basePath: /api/v1/
definitions:
  dto.BackupCodeDto:
    properties:
      backup_code:
        description: |-
          Code is the verification code provided by the user.
          required: true
          example: "123456"
        type: string
    required:
    - backup_code
    type: object
  dto.CreateUser:
    properties:
      email:
        description: |-
          Email is the user's email address.
          required: true
          maxLength: 255
          example: "user@example.com"
        maxLength: 255
        type: string
      first_name:
        description: |-
          FirstName is the user's first name.
          maxLength: 255
          example: "John"
        maxLength: 255
        type: string
      last_name:
        description: |-
          LastName is the user's last name.
          maxLength: 255
          example: "Doe"
        maxLength: 255
        type: string
      password:
        description: |-
          Password is the user's password.
          required: true
          minLength: 6
          maxLength: 32
          example: "P@ssw0rd123"
        maxLength: 32
        minLength: 6
        type: string
      password_confirm:
        description: |-
          PasswordConfirm is the confirmation of the user's password.
          required: true
          must match the Password field
          example: "P@ssw0rd123"
        type: string
    required:
    - email
    - password
    - password_confirm
    type: object
  dto.GroupSchamas:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  dto.OrganizationRequest:
    properties:
      avatar:
        description: |-
          Avatar is the URL of the organization's avatar image.
          required: false
          example: "https://example.com/avatar.png"
        type: string
      display_name:
        description: |-
          DisplayName is the display name of the organization.
          required: true
          maxLength: 255
          example: "Organization Test"
        maxLength: 255
        type: string
      name:
        description: |-
          Name is the name of the organization.
          required: true
          maxLength: 255
          example: "Organization Test"
        maxLength: 255
        type: string
      owner_id:
        description: |-
          OwnerID is the ID of the user who owns the organization.
          required: false
          example: 123
        type: integer
    required:
    - display_name
    - name
    type: object
  dto.ResetPassUser:
    properties:
      new_password:
        description: |-
          NewPassword is the new password that the user wants to set.
          required: true
          minLength: 6
          maxLength: 128
          example: "NewPassword123!"
        maxLength: 128
        minLength: 6
        type: string
      new_password_confirm:
        description: |-
          NewPasswordConfirm is the confirmation of the new password.
          required: true
          must be equal to NewPassword
          example: "NewPassword123!"
        type: string
    required:
    - new_password
    type: object
  dto.SignInToken:
    properties:
      expires_in_seconds:
        description: |-
          Default: 2592000
          Optional parameter to specify the life duration of the sign in token in seconds. By default, the duration is 30 days.
          example: 2592000
        type: integer
      user_id:
        description: |-
          The ID of the user that can use the newly created sign in token
          required: true
          example: user_amkHacjkasdpoqe
        type: integer
    required:
    - user_id
    type: object
  dto.TemplateUser:
    properties:
      templateSlug:
        description: |-
          The slug of the template that can use the newly token
          required: true
          example: "abc-custom"
        type: string
      userId:
        description: |-
          The ID of the user that can use the newly created sign in token
          required: true
          example: user_amkHacjkasdpoqe
        type: integer
    required:
    - templateSlug
    - userId
    type: object
  dto.TokenInfomation:
    properties:
      expired_at:
        type: integer
      session_id:
        type: string
      session_name:
        type: string
      token:
        type: string
      user_id:
        type: integer
    type: object
  dto.TotpAuthenticator:
    properties:
      code:
        description: |-
          Code is the 2FA code provided by the user.
          required: true
          example: "123456"
        type: string
      strategy:
        description: |-
          AuthType indicates the type of authentication (e.g., 'email', 'sms', 'auth_code').
          required: true
          example: "auth_code"
        type: string
    required:
    - code
    - strategy
    type: object
  dto.TwoFASetting:
    properties:
      strategy:
        description: |-
          AuthType indicates the type of authentication (e.g., email, SMS).
          required: true
          example: 1."email" 2."sms" 3."auth_code"
        type: string
    required:
    - strategy
    type: object
  dto.UpdatePassUser:
    properties:
      new_password:
        description: |-
          NewPassword is the new password that the user wants to set.
          required: true
          minLength: 6
          maxLength: 128
          example: "NewPassword123!"
        maxLength: 128
        minLength: 6
        type: string
      new_password_confirm:
        description: |-
          NewPasswordConfirm is the confirmation of the new password.
          required: true
          must be equal to NewPassword
          example: "NewPassword123!"
        type: string
      old_password:
        description: |-
          OldPassword is the current password of the user.
          required: true
          minLength: 6
          maxLength: 128
          example: "OldPassword123!"
        maxLength: 128
        minLength: 6
        type: string
    required:
    - new_password
    - old_password
    type: object
  dto.UpdateUser:
    properties:
      additional_information:
        additionalProperties: true
        description: |-
          AdditionalInformation contains extra user details in a flexible format
          example: {"address1": "123 Main St", "city": "New York"}
        type: object
      first_name:
        description: |-
          FirstName is the user's first name
          example: "John"
        type: string
      last_name:
        description: |-
          LastName is the user's last name
          example: "Doe"
        type: string
      username:
        description: |-
          username is the user's username
          example: "johndymamic"
        maxLength: 32
        minLength: 6
        type: string
    type: object
  dto.UserInfo:
    properties:
      additional_information:
        additionalProperties: true
        type: object
      created_at:
        type: string
      email:
        type: string
      first_factor_verification:
        additionalProperties: true
        type: object
      first_name:
        type: string
      groups:
        items:
          $ref: '#/definitions/dto.GroupSchamas'
        type: array
      id:
        type: integer
      last_ip_sign_in:
        type: string
      last_login:
        type: string
      last_name:
        type: string
      number_of_logins:
        type: integer
      phone_number:
        type: string
      second_factor_type:
        type: string
      second_factor_verification:
        additionalProperties: true
        type: object
      status:
        type: string
      supported_first_factors:
        items:
          additionalProperties: true
          type: object
        type: array
      supported_second_factors:
        items:
          additionalProperties: true
          type: object
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
  dto.UserInfoFoward:
    properties:
      token:
        allOf:
        - $ref: '#/definitions/dto.TokenInfomation'
        description: Authentication token information
      user:
        allOf:
        - $ref: '#/definitions/dto.UserInfo'
        description: User information
    type: object
  dto.VerifyPassword:
    properties:
      password:
        description: |-
          The user password to verify.
          example: "abc@123X"
        type: string
    required:
    - password
    type: object
  model.Member:
    properties:
      email:
        type: string
      id:
        type: integer
      phone_number:
        type: string
      username:
        type: string
    type: object
  model.MemberGroup:
    properties:
      id:
        type: integer
      member_groups:
        items:
          $ref: '#/definitions/model.Member'
        type: array
      name:
        type: string
      tenant:
        $ref: '#/definitions/model.Tenant'
      tenant_id:
        type: integer
    type: object
  model.Tenant:
    properties:
      avatar:
        type: string
      code:
        type: string
      created_at:
        type: string
      description:
        type: string
      display_name:
        type: string
      id:
        type: integer
      member_groups:
        items:
          $ref: '#/definitions/model.MemberGroup'
        type: array
      members:
        items:
          $ref: '#/definitions/model.Member'
        type: array
      name:
        type: string
      owner:
        $ref: '#/definitions/model.Member'
      owner_id:
        type: integer
      slug:
        type: string
      updated_at:
        type: string
    type: object
  utils.BasicResponse:
    properties:
      code:
        description: HTTP status code.
        example: 500
        type: integer
      data: {}
      error:
        description: Error message.
        example: '{$err}'
        type: string
      message:
        description: Message corresponding to the status code.
        example: internal_server_error
        type: string
    type: object
  utils.FailedResponse:
    properties:
      code:
        description: HTTP status code.
        example: 400
        type: integer
      error:
        description: Error message.
        example: '{$err}'
        type: string
      message:
        description: Message corresponding to the status code.
        example: bad_request
        type: string
    type: object
  utils.Paginator:
    properties:
      count:
        example: 100
        type: integer
      data: {}
      has_next:
        example: true
        type: boolean
      has_previous:
        example: false
        type: boolean
      page_num:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
    type: object
  utils.SuccessResponse:
    properties:
      code:
        description: HTTP status code.
        example: 200
        type: integer
      data:
        description: data payload.
      message:
        example: success
        type: string
    type: object
host: 127.0.0.1:5000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a documents for OneAuxilia API.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Documents OneAuxilia API
  version: "1.0"
paths:
  /organizations/:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves a list of all organizational instances.
        It requires `OneAuxiliaAuth` for authorization.
      parameters:
      - description: |-
          Returns users with the user ids specified. For each user id, the + and - can be prepended to the id,
          which denote whether the respective user id should be included or excluded from the result set.
          Accepts up to 100 user ids. Any user ids not found are ignored.
          example: 234
        in: query
        name: owner_id
        type: integer
      - description: |-
          The page number to retrieve. Defaults to 1 if not specified.
          example: 1
        in: query
        name: page_num
        type: integer
      - description: |-
          The number of items per page. Defaults to 10 if not specified.
          example: 10
        in: query
        name: page_size
        type: integer
      - description: |-
          Returns organizations with ID, name, or slug that match the given query. Uses exact match for organization ID and partial match for name and slug.
          example: abc
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of all organizational instances
          schema:
            $ref: '#/definitions/utils.Paginator'
        "400":
          description: Bad request due to invalid input or other issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Retrieve all organizational instances
      tags:
      - Organizations
    post:
      consumes:
      - application/json
      description: This endpoint allows for the creation of a new organization.
      parameters:
      - description: Organization creation details
        in: body
        name: CreateOrg
        required: true
        schema:
          $ref: '#/definitions/dto.OrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful organization creation response
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad request due to validation errors or other issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: Not found, such as if the organization already exists
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Create a new organization
      tags:
      - Organizations
  /organizations/{org_id}/:
    delete:
      consumes:
      - application/json
      description: This endpoint deletes an organization.
      parameters:
      - description: The ID of the organization to delete
        in: path
        name: org_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful organization deletion response
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad request due to validation errors or other issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: Not found, such as if the organization does not exist
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Delete an organization
      tags:
      - Organizations
    get:
      consumes:
      - application/json
      description: This endpoint retrieves the details of a specific organization
        identified by the provided organization ID.
      parameters:
      - description: The ID of the organization to retrieve
        in: path
        name: org_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Organization details
          schema:
            $ref: '#/definitions/model.Tenant'
        "400":
          description: Bad request due to validation errors or other issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Get organization details
      tags:
      - Organizations
    put:
      consumes:
      - application/json
      description: This endpoint allows updating details of an organization.
      parameters:
      - description: The ID of the organization to update
        in: path
        name: org_id
        required: true
        type: string
      - description: Organization update details
        in: body
        name: OrgUpdate
        required: true
        schema:
          $ref: '#/definitions/dto.OrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful organization update response
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad request due to validation errors or other issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: Not found, such as if the organization does not exist
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Update organization details
      tags:
      - Organizations
  /sessions/{session_id}/revoke/:
    post:
      consumes:
      - application/json
      description: Revokes a user session by its session ID, effectively logging the
        user out.
      parameters:
      - description: The ID of the session to revoke
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session revoked successfully
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad request due to invalid input or other issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: Session not found if the specified session ID does not exist
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Revoke a user session
      tags:
      - Sessions
  /sessions/{session_id}/tokens/:
    post:
      consumes:
      - application/json
      description: This endpoint retrieves a session token for a user by providing
        their user ID, session ID, and a template slug.
      parameters:
      - description: Session ID associated with the token retrieval
        in: path
        name: session_id
        required: true
        type: integer
      - description: User details for which to retrieve the token
        in: body
        name: TemplateUser
        required: true
        schema:
          $ref: '#/definitions/dto.TemplateUser'
      produces:
      - application/json
      responses:
        "200":
          description: Successful token retrieval response
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request due to validation errors or other issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: Not found, such as if the user or session does not exist
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Retrieve token with template
      tags:
      - Sessions
  /sessions/{session_id}/verify/:
    post:
      consumes:
      - application/json
      description: Verifies the validity of a user session using its session ID. Requires
        `OneAuxiliaAuth` for authorization.
      parameters:
      - description: The ID of the session to verify
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session verified successfully
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad request due to invalid input or other issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: Session not found if the specified session ID does not exist
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Verify a user session
      tags:
      - Sessions
  /sessions/{user_id}/:
    get:
      consumes:
      - application/json
      description: Retrieves the details of all sessions associated with a specified
        user ID.
      parameters:
      - description: The ID of the user whose sessions are to be retrieved
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session details retrieved successfully
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad request due to invalid input or other issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: User not found if the specified user ID does not exist
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Get list of session details for a user
      tags:
      - Sessions
  /sign_in_tokens/:
    post:
      consumes:
      - application/json
      description: Authenticates superadmin users by validating their credentials
        and returns a sign-in token upon successful login.
      parameters:
      - description: Sign-in request body containing the necessary credentials
        in: body
        name: SignInToken
        required: true
        schema:
          $ref: '#/definitions/dto.SignInToken'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login response containing user information and an
            authentication token
          schema:
            $ref: '#/definitions/dto.UserInfoFoward'
        "400":
          description: Bad request due to invalid input or incorrect login credentials
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: User not found if the provided credentials do not match any
            existing account
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error if something went wrong on the server
            side
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Create Sign-In Token
      tags:
      - SignInTokens
  /sign_in_tokens/{sign_in_token_id}/:
    delete:
      consumes:
      - application/json
      description: Revokes a specific sign-in token, invalidating it and preventing
        any further use.
      parameters:
      - description: The ID of the sign-in token to revoke
        in: path
        name: sign_in_token_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response indicating the token was revoked
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Invalid request or token ID
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: Token not found
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Revoke a sign-in token
      tags:
      - SignInTokens
  /users/:
    get:
      consumes:
      - application/json
      description: This endpoint allows superadmin users to retrieve a list of all
        users in the system.
      parameters:
      - description: |-
          The page number to retrieve. Defaults to 1 if not specified.
          example: 1
        in: query
        name: page_num
        type: integer
      - description: |-
          The number of items per page. Defaults to 10 if not specified.
          example: 10
        in: query
        name: page_size
        type: integer
      - description: |-
          Returns users with the specified phone numbers. Accepts up to 100 phone numbers. Any phone numbers not found are ignored.
          example: user_amkHacjkasdpoqe
        in: query
        name: phone_number
        type: string
      - description: Returns users matching the search term. This can be used for
          partial matches on user attributes.
        in: query
        name: search
        type: string
      - description: |-
          Returns users with the specified user IDs. The IDs can be either positive or negative, where a positive ID includes the user,
          and a negative ID excludes the user from the results. Accepts up to 100 user IDs. Any user IDs not found are ignored.
          example: 2592000, -123456
        in: query
        name: user_id
        type: integer
      - description: |-
          Returns users with the specified usernames. Accepts up to 100 usernames. Any usernames not found are ignored.
          example: user_amkHacjkasdpoqe
        in: query
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response containing a list of users
          schema:
            $ref: '#/definitions/utils.Paginator'
        "400":
          description: Bad request due to invalid query parameters
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: No users found
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Get all users
      tags:
      - Users
  /users/{dynamic_field}/:
    get:
      consumes:
      - application/json
      description: Retrieves the profile information of a user based on a dynamic
        field, which can be either the username, phone, or email.
      parameters:
      - description: The username, phone, or email of the user to retrieve
        in: path
        name: dynamic_field
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user profile information
          schema:
            $ref: '#/definitions/dto.UserInfo'
        "400":
          description: Bad request due to validation errors or other issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: User not found if no user matches the provided dynamic field
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Get user profile by dynamic field
      tags:
      - Users
  /users/{user_id}/:
    delete:
      consumes:
      - application/json
      description: This endpoint allows for the deletion of a user account.
      parameters:
      - description: The ID of the user to be deleted
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful account deletion response
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad request due to validation errors or other issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: Not found, such as if the specified user does not exist
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Delete user account
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Retrieves the profile information of a specific user based on the
        provided user ID.
      parameters:
      - description: The ID of the user to retrieve
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user profile information
          schema:
            $ref: '#/definitions/dto.UserInfo'
        "400":
          description: Bad request due to validation errors or other issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: User not found if the provided user ID does not exist
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Retrieve user profile
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Allows users to update their profile information.
      parameters:
      - description: The ID of the user to update
        in: path
        name: user_id
        required: true
        type: string
      - description: User profile update details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: Successful profile update response
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad request due to validation errors or other issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: User not found if the specified ID does not exist
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Update user information
      tags:
      - Users
  /users/{user_id}/change_password/:
    put:
      consumes:
      - application/json
      description: This endpoint enables users to change their password. It requires
        Bearer authentication and `OneAuxiliaAuth` for authorization.
      parameters:
      - description: The ID of the user whose password is to be changed
        in: path
        name: user_id
        required: true
        type: string
      - description: Details of the new password for the user
        in: body
        name: UpdatePassUser
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePassUser'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response indicating the password has been changed
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad request due to validation errors or other issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: User not found if the specified ID does not exist
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Change user password
      tags:
      - Users
  /users/{user_id}/mfa/:
    delete:
      consumes:
      - application/json
      description: This endpoint allows superadmin users to disable MFA methods for
        a specific user.
      parameters:
      - description: The ID of the user whose MFA methods are to be disabled
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response indicating the user's MFA methods have
            been disabled
          schema:
            $ref: '#/definitions/dto.UserInfoFoward'
        "400":
          description: Bad request due to invalid input or incorrect credentials
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: User not found if the provided user ID does not exist
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error if something went wrong on the server
            side
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Disable Multi-Factor Authentication (MFA) for a User
      tags:
      - Users
  /users/{user_id}/regen_backup_code/:
    post:
      consumes:
      - application/json
      description: Generates a new backup code for a user, which can be used for account
        recovery or authentication.
      parameters:
      - description: The ID of the user for whom to regenerate the backup code
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: New backup code successfully generated
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad request or error generating the new backup code
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: User not found or account issue
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Regenerate Backup Code
      tags:
      - Users
  /users/{user_id}/reset_password/:
    put:
      consumes:
      - application/json
      description: This endpoint allows users to reset their password.
      parameters:
      - description: The ID of the user whose password is to be reset
        in: path
        name: user_id
        required: true
        type: string
      - description: Details of the new password for the user
        in: body
        name: ResetPassUser
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPassUser'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response indicating the password has been reset
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad request due to validation errors or other issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: User not found if the specified ID does not exist
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Reset user password
      tags:
      - Users
  /users/{user_id}/update_totp/:
    put:
      consumes:
      - application/json
      description: Updates the two-factor authentication (2FA) secret key for the
        user identified by the provided user ID.
      parameters:
      - description: The ID of the user whose 2FA secret key is to be updated
        in: path
        name: user_id
        required: true
        type: string
      - description: TwoFASetting request body containing the new 2FA secret key and
          strategy
        in: body
        name: TwoFASetting
        required: true
        schema:
          $ref: '#/definitions/dto.TwoFASetting'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response indicating the 2FA secret key was updated
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad request due to invalid input, validation errors, or other
            issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: Not found if the user ID does not exist
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error if something went wrong on the server
            side
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Update Two-Factor Authentication Secret Key
      tags:
      - Users
  /users/{user_id}/verify_password/:
    post:
      consumes:
      - application/json
      description: Authenticates superadmin users by verifying their password.
      parameters:
      - description: The ID of the user whose password is being verified
        in: path
        name: user_id
        required: true
        type: string
      - description: VerifyPassword request body containing the necessary credentials
        in: body
        name: VerifyPassword
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyPassword'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response containing user information and an authentication
            token
          schema:
            $ref: '#/definitions/dto.UserInfoFoward'
        "400":
          description: Invalid request due to malformed input or incorrect login credentials
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: User not found if the provided user ID does not exist
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error if something went wrong on the server
            side
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Verify Password for Sign-In
      tags:
      - Users
  /users/create/:
    post:
      consumes:
      - application/json
      description: This endpoint allows the creation of a new user account.
      parameters:
      - description: User creation details
        in: body
        name: CreateUser
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: Successful account creation response
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad request due to validation errors or other issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: Not found, such as if the user already exists or if the endpoint
            could not process the request
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Create a new user account
      tags:
      - Users
  /users/validate_backup_code/:
    post:
      consumes:
      - application/json
      description: Validates a recovery code provided by the user for authentication
        or account recovery purposes.
      parameters:
      - description: Request body containing the recovery code
        in: body
        name: BackupCodeDto
        required: true
        schema:
          $ref: '#/definitions/dto.BackupCodeDto'
      produces:
      - application/json
      responses:
        "200":
          description: Successful validation of the recovery code
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Invalid request or recovery code
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: Recovery code or user not found
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Validate Recovery Code
      tags:
      - Users
  /users/validate_totp/:
    post:
      consumes:
      - application/json
      description: Validates the provided two-factor authentication (2FA) credentials
        for an existing user.
      parameters:
      - description: Request body containing the 2FA credentials
        in: body
        name: TotpAuthenticator
        required: true
        schema:
          $ref: '#/definitions/dto.TotpAuthenticator'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response indicating the 2FA credentials are valid
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad request due to invalid input or other issues
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "404":
          description: Not found if the user or 2FA setup is not found
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.BasicResponse'
      security:
      - OneAuxiliaAuth: []
      summary: Validate Two-Factor Authentication Credentials
      tags:
      - Users
securityDefinitions:
  OneAuxiliaAuth:
    in: header
    name: OneAuxiliaAuth
    type: apiKey
swagger: "2.0"
