// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/authenticator/regenerate_recovery_codes/": {
            "post": {
                "description": "Generates a new recovery code for account recovery or authentication purposes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authenticators"
                ],
                "summary": "Regenerate Recovery Code",
                "responses": {
                    "200": {
                        "description": "New recovery code successfully generated",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or error generating new recovery code",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found or account issue",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/authenticator/update_secret_key/{user_id}/": {
            "put": {
                "description": "Updates the two-factor authentication (2FA) secret key associated with the provided email address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authenticators"
                ],
                "summary": "Update seconds factor Secret Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Email Address",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "TwoFASetting Request Body",
                        "name": "TwoFASetting",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TwoFASetting"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response indicating the 2FA secret key was updated",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found if the email is not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/authenticator/valid_recovery_codes/": {
            "post": {
                "description": "Validates a recovery code used for user authentication or account recovery.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authenticators"
                ],
                "summary": "Validate Recovery Code",
                "parameters": [
                    {
                        "description": "RecoveryCodeDto",
                        "name": "RecoveryCodeDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RecoveryCodeDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful validation of the recovery code",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or recovery code",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Recovery code not found or user not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/authenticator/validate/": {
            "post": {
                "description": "Validates the provided two-factor authentication (2FA) credentials for an existing user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authenticators"
                ],
                "summary": "Validate seconds factor Credentials",
                "parameters": [
                    {
                        "description": "GoogleAuthenticator Request Body",
                        "name": "GoogleAuthenticator",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GoogleAuthenticator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response indicating 2FA validation",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found if the user or 2FA setup is not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/authenticator/validate/sign_ins/": {
            "post": {
                "description": "Validates the provided two-factor authentication (2FA) credentials for an existing user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authenticators"
                ],
                "summary": "Validate Two-Factor Authentication Credentials",
                "parameters": [
                    {
                        "description": "GoogleAuthenticator Request Body",
                        "name": "GoogleAuthenticator",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GoogleAuthenticator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response indicating 2FA validation",
                        "schema": {
                            "$ref": "#/definitions/dto.UserInfoFoward"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found if the user or 2FA setup is not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/authorized/": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Handles user authorization by validating the provided credentials or tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorize"
                ],
                "summary": "Authorize User",
                "parameters": [
                    {
                        "description": "Authorize Request Body",
                        "name": "Authorize",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AuthorizeReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful authorization response",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found if the user or resource is not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/environment/": {
            "post": {
                "description": "Retrieves and loads all configuration settings for the environment.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Environment"
                ],
                "summary": "Load all configuration settings",
                "responses": {
                    "200": {
                        "description": "Configuration settings loaded successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Configuration settings not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/generate/": {
            "post": {
                "description": "Generates and sends a verification code to the user's email address based on the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authenticators"
                ],
                "summary": "Generate Code By Mail",
                "parameters": [
                    {
                        "description": "VerificationBase Request Body",
                        "name": "VerificationBase",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.VerificationBase"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response indicating the code was sent",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found if the email or resource is not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/members/change_password/": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "TenantHeader": []
                    }
                ],
                "description": "This endpoint allows users to change their password. It requires Bearer authentication and a ` + "`" + `Tenant-Header` + "`" + ` for authorization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "description": "User password update details",
                        "name": "UpdatePassUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePassUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful password change response",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found, such as if the user does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/members/reset_password/": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "TenantHeader": []
                    }
                ],
                "description": "This endpoint allows users to reset their password. It requires Bearer authentication and a ` + "`" + `Tenant-Header` + "`" + ` for authorization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "description": "User password reset details",
                        "name": "ResetPassUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ResetPassUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful password reset response",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found, such as if the user does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/members/revoke/": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "TenantHeader": []
                    }
                ],
                "description": "This endpoint revokes a user account. It requires both Bearer authentication and a ` + "`" + `Tenant-Header` + "`" + ` for authorization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Revoke a user account",
                "responses": {
                    "200": {
                        "description": "Successful account revocation response",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found, such as if the account does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/members/update_profiles/": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "TenantHeader": []
                    }
                ],
                "description": "This endpoint allows users to update their profile information. It requires Bearer authentication and a ` + "`" + `Tenant-Header` + "`" + ` for authorization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "User profile update details",
                        "name": "UpdateUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful profile update response",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found, such as if the user does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/members/view_profiles/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "TenantHeader": []
                    }
                ],
                "description": "This endpoint retrieves the profile information of the currently authenticated user. It requires Bearer authentication and a ` + "`" + `Tenant-Header` + "`" + ` for authorization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "User profile information",
                        "schema": {
                            "$ref": "#/definitions/dto.UserInfo"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found, such as if the user does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/permissions/": {
            "get": {
                "description": "Retrieves a list of available permissions for users in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Get Permissions for Users",
                "responses": {
                    "200": {
                        "description": "Successful response containing permissions list",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found, if no permissions are available",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/sessions/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "TenantHeader": []
                    }
                ],
                "description": "Retrieves the details of the current user session.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Get user session details",
                "responses": {
                    "200": {
                        "description": "Session details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/sessions/user_tokens/{user_id}/": {
            "post": {
                "security": [
                    {
                        "TenantHeader": []
                    }
                ],
                "description": "This endpoint retrieves a session token for a specific user using their user ID. Requires “Tenant-Header“ for authorization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Retrieve token for user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID for which to retrieve the token",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful token retrieval response",
                        "schema": {
                            "$ref": "#/definitions/dto.UserInfoFoward"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found, such as if the user does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/sessions/verify_tokens/": {
            "post": {
                "security": [
                    {
                        "TenantHeader": []
                    },
                    {
                        "TemplateSlug": []
                    }
                ],
                "description": "Verifies the validity of a token for user sessions. This endpoint requires the ` + "`" + `TemplateSlug` + "`" + ` header which can be either empty or non-empty.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "VerifyTokens for user sessions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token to be verified",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token is valid",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid token or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Token not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/sessions/{session_id}/revoke/": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Revokes a user session by its session ID, effectively logging the user out.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Revoke a user session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "session_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session revoked successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/sessions/{session_id}/user_tokens/{user_id}/": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "TenantHeader": []
                    },
                    {
                        "TemplateSlug": []
                    }
                ],
                "description": "This endpoint retrieves a session token for a specific user using their user ID and session ID, with additional template slug validation. Requires Bearer token, “Tenant-Header“, and TemplateSlug for authorization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Retrieve token with template",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID for which to retrieve the token",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Session ID associated with the token retrieval",
                        "name": "session_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful token retrieval response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found, such as if the user or session does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/sessions/{session_id}/verify/": {
            "post": {
                "security": [
                    {
                        "TenantHeader": []
                    }
                ],
                "description": "Verifies the validity of a user session by its session ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Verify a user session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "session_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session verified successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/sign_in_tokens/": {
            "post": {
                "security": [
                    {
                        "TenantHeader": []
                    }
                ],
                "description": "This endpoint allows superadmin users to log in by providing their credentials. It requires the ` + "`" + `Tenant-Header` + "`" + ` for authorization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SignInTokens"
                ],
                "summary": "Signin for accounts",
                "parameters": [
                    {
                        "description": "Login credentials for superadmin",
                        "name": "UserLogin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginAuth"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login response containing user info and token",
                        "schema": {
                            "$ref": "#/definitions/dto.UserInfoFoward"
                        }
                    },
                    "400": {
                        "description": "Invalid request or login credentials",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/sign_in_tokens/social/": {
            "post": {
                "security": [
                    {
                        "TenantHeader": []
                    }
                ],
                "description": "This endpoint allows users to log in using their social credentials (e.g., Google, Facebook).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SignInTokens"
                ],
                "summary": "Login using social credentials",
                "parameters": [
                    {
                        "description": "Social Login Credentials",
                        "name": "SocailLogin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SocialLoginBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login response",
                        "schema": {
                            "$ref": "#/definitions/dto.UserInfoFoward"
                        }
                    },
                    "400": {
                        "description": "Invalid input or authentication error",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/sign_in_tokens/{sign_in_token_id}/": {
            "post": {
                "security": [
                    {
                        "TenantHeader": []
                    }
                ],
                "description": "This endpoint revokes a specific sign-in token, invalidating it and preventing further use.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SignInTokens"
                ],
                "summary": "Revoke a sign-in token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the sign-in token to revoke",
                        "name": "sign_in_token_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful revocation response",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or token ID",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Token not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/signup/": {
            "post": {
                "security": [
                    {
                        "TenantHeader": []
                    }
                ],
                "description": "This endpoint allows for the creation of a new user account. The request requires a ` + "`" + `Tenant-Header` + "`" + ` for authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Sign up a new user account",
                "parameters": [
                    {
                        "description": "User signup details",
                        "name": "SignupUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignupUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful signup response",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found, such as if the user already exists",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/verify/": {
            "post": {
                "description": "Verifies the code sent to the user's email address. If the code is valid and matches, the verification is successful.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authenticators"
                ],
                "summary": "Verify Code By Mail",
                "parameters": [
                    {
                        "description": "VerificationBase Request Body",
                        "name": "VerificationBase",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.VerificationBase"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response indicating the code verification was successful",
                        "schema": {
                            "$ref": "#/definitions/dto.UserInfoFoward"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found if the email or code is not found",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/{session_id}/refresh_tokens/": {
            "post": {
                "security": [
                    {
                        "TenantHeader": []
                    }
                ],
                "description": "This endpoint refreshes the session token using the provided session ID. Requires ` + "`" + `Tenant-Header` + "`" + ` for authorization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Refresh session token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID to refresh",
                        "name": "session_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful token refresh response",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found, such as if the session does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        },
        "/{session_id}/sign_outs/": {
            "post": {
                "security": [
                    {
                        "TenantHeader": []
                    }
                ],
                "description": "This endpoint logs out a user by invalidating their session. Requires a “Tenant-Header“ for authorization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SignOuts"
                ],
                "summary": "Log out a user session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID to be logged out",
                        "name": "session_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful logout response",
                        "schema": {
                            "$ref": "#/definitions/utils.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request due to validation errors or other issues",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "404": {
                        "description": "Not found, such as if the session does not exist",
                        "schema": {
                            "$ref": "#/definitions/utils.FailedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.BasicResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AuthorizeReq": {
            "type": "object",
            "properties": {
                "codename": {
                    "description": "Codename string ` + "`" + `json:\"codename\" validate:\"required\"` + "`" + `",
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.GoogleAuthenticator": {
            "type": "object",
            "required": [
                "auth_type",
                "code"
            ],
            "properties": {
                "auth_type": {
                    "description": "AuthType indicates the type of authentication (e.g., 'email', 'sms', 'auth_code').\nrequired: true\nexample: \"auth_code\"",
                    "type": "string"
                },
                "code": {
                    "description": "Code is the 2FA code provided by the user.\nrequired: true\nexample: \"123456\"",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID represents the ID of the user for whom the 2FA is being validated.\nrequired: true\nexample: 123",
                    "type": "integer"
                }
            }
        },
        "dto.GroupSchamas": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.LoginAuth": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "description": "Password is the password of the user\nrequired: true\nexample: abc@123X",
                    "type": "string"
                },
                "username": {
                    "description": "Username is the email address of the user\nrequired: true\nexample: leomessi305@gmail.com",
                    "type": "string"
                }
            }
        },
        "dto.RecoveryCodeDto": {
            "type": "object",
            "required": [
                "auth_type",
                "code",
                "email"
            ],
            "properties": {
                "auth_type": {
                    "description": "AuthType indicates the type of authentication (e.g., email, SMS).\nrequired: true\nexample: 1.\"email\" 2.\"sms\" 3.\"auth_code\"",
                    "type": "string"
                },
                "code": {
                    "description": "Code is the verification code provided by the user.\nrequired: true\nexample: \"123456\"",
                    "type": "string"
                },
                "email": {
                    "description": "EmailOrPhone is the email or phone number to which the verification code was sent.\nrequired: true\nmaxLength: 255\nexample: \"user@example.com\"",
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "dto.ResetPassUser": {
            "type": "object",
            "required": [
                "new_password"
            ],
            "properties": {
                "new_password": {
                    "description": "NewPassword is the new password that the user wants to set.\nrequired: true\nminLength: 6\nmaxLength: 128\nexample: \"NewPassword123!\"",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 6
                },
                "new_password_confirm": {
                    "description": "NewPasswordConfirm is the confirmation of the new password.\nrequired: true\nmust be equal to NewPassword\nexample: \"NewPassword123!\"",
                    "type": "string"
                }
            }
        },
        "dto.SignupUser": {
            "type": "object",
            "required": [
                "email",
                "password",
                "password_confirm"
            ],
            "properties": {
                "email": {
                    "description": "Email is the user's email address.\nrequired: true\nmaxLength: 255\nexample: \"user@example.com\"",
                    "type": "string",
                    "maxLength": 255
                },
                "first_name": {
                    "description": "FirstName is the user's first name.\nmaxLength: 255\nexample: \"John\"",
                    "type": "string",
                    "maxLength": 255
                },
                "last_name": {
                    "description": "LastName is the user's last name.\nmaxLength: 255\nexample: \"Doe\"",
                    "type": "string",
                    "maxLength": 255
                },
                "password": {
                    "description": "Password is the user's password.\nrequired: true\nminLength: 6\nmaxLength: 32\nexample: \"P@ssw0rd123\"",
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 6
                },
                "password_confirm": {
                    "description": "PasswordConfirm is the confirmation of the user's password.\nrequired: true\nmust match the Password field\nexample: \"P@ssw0rd123\"",
                    "type": "string"
                }
            }
        },
        "dto.SocialLoginBody": {
            "type": "object",
            "required": [
                "provider_name"
            ],
            "properties": {
                "provider_access_token": {
                    "description": "ProviderAccessToken is the provider token of client\nrequired: true\nexample: \"eyKaaasd....\"",
                    "type": "string"
                },
                "provider_code": {
                    "description": "ProviderAccessToken is the provider code of client\nrequired: true\nexample: \"elKaaasd....\"",
                    "type": "string"
                },
                "provider_name": {
                    "description": "ProviderName is the provider name of client\nrequired: true\nexample: google",
                    "type": "string"
                }
            }
        },
        "dto.TokenInfomation": {
            "type": "object",
            "properties": {
                "expired_at": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "session_name": {
                    "type": "string"
                },
                "session_token": {
                    "type": "string"
                }
            }
        },
        "dto.TwoFASetting": {
            "type": "object",
            "required": [
                "auth_type"
            ],
            "properties": {
                "auth_type": {
                    "description": "AuthType indicates the type of authentication (e.g., email, SMS).\nrequired: true\nexample: 1.\"email\" 2.\"sms\" 3.\"auth_code\"",
                    "type": "string"
                }
            }
        },
        "dto.UpdatePassUser": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "description": "NewPassword is the new password that the user wants to set.\nrequired: true\nminLength: 6\nmaxLength: 128\nexample: \"NewPassword123!\"",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 6
                },
                "new_password_confirm": {
                    "description": "NewPasswordConfirm is the confirmation of the new password.\nrequired: true\nmust be equal to NewPassword\nexample: \"NewPassword123!\"",
                    "type": "string"
                },
                "old_password": {
                    "description": "OldPassword is the current password of the user.\nrequired: true\nminLength: 6\nmaxLength: 128\nexample: \"OldPassword123!\"",
                    "type": "string",
                    "maxLength": 128,
                    "minLength": 6
                }
            }
        },
        "dto.UpdateUser": {
            "type": "object",
            "properties": {
                "additional_information": {
                    "description": "AdditionalInformation contains extra user details in a flexible format\nexample: {\"address1\": \"123 Main St\", \"city\": \"New York\"}",
                    "type": "object",
                    "additionalProperties": true
                },
                "first_name": {
                    "description": "FirstName is the user's first name\nexample: \"John\"",
                    "type": "string"
                },
                "last_name": {
                    "description": "LastName is the user's last name\nexample: \"Doe\"",
                    "type": "string"
                },
                "second_factor_type": {
                    "description": "SecondFactorType is the user's second factor type\nexample: \"sms, email, auth_code, none\"",
                    "type": "string"
                }
            }
        },
        "dto.UserInfo": {
            "type": "object",
            "properties": {
                "additional_information": {
                    "type": "object",
                    "additionalProperties": true
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.GroupSchamas"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "last_ip_sign_in": {
                    "type": "string"
                },
                "last_login": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "number_of_logins": {
                    "type": "integer"
                },
                "second_factor_type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.UserInfoFoward": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "Authentication token information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TokenInfomation"
                        }
                    ]
                },
                "user": {
                    "description": "User information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UserInfo"
                        }
                    ]
                }
            }
        },
        "dto.VerificationBase": {
            "type": "object",
            "required": [
                "auth_type",
                "email_or_phone"
            ],
            "properties": {
                "auth_type": {
                    "description": "AuthType indicates the type of authentication (e.g., email, SMS).\nrequired: true\nexample: 1.\"email\" 2.\"sms\" 3.\"auth_code\"",
                    "type": "string"
                },
                "code": {
                    "description": "Code is the verification code provided by the user.\nexample: \"123456\"",
                    "type": "string"
                },
                "email_or_phone": {
                    "description": "EmailOrPhone is the email or phone number to which the verification code was sent.\nrequired: true\nmaxLength: 255\nexample: \"user@example.com\"",
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "utils.BasicResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code.",
                    "type": "integer",
                    "example": 500
                },
                "data": {},
                "error": {
                    "description": "Error message.",
                    "type": "string",
                    "example": "{$err}"
                },
                "message": {
                    "description": "Message corresponding to the status code.",
                    "type": "string",
                    "example": "internal_server_error"
                }
            }
        },
        "utils.FailedResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code.",
                    "type": "integer",
                    "example": 400
                },
                "error": {
                    "description": "Error message.",
                    "type": "string",
                    "example": "{$err}"
                },
                "message": {
                    "description": "Message corresponding to the status code.",
                    "type": "string",
                    "example": "bad_request"
                }
            }
        },
        "utils.SuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code.",
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "description": "data payload."
                },
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "TemplateSlug": {
            "type": "apiKey",
            "name": "Template-Slug",
            "in": "header"
        },
        "TenantHeader": {
            "type": "apiKey",
            "name": "Tenant-Header",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "127.0.0.1:5000",
	BasePath:         "/api/v1/",
	Schemes:          []string{},
	Title:            "Documents OneAuxilia API",
	Description:      "This is a documents for OneAuxilia API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
